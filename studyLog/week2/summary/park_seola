# 11. 문장

### 선언문

- function 문은 세미콜론으로 끝나지 않지만, let 문과 선언문은 세미콜론으로 끝난다.
- function 문은 호이스팅되기 때문에 블록 내(함수 몸체나 모듈 제외)에 위치해서는 안된다.
- const 변수는 다른 값을 할당할 수 없지만, 할당된 객체나 배열의 값을 바꿀 수 있다.
    - `Object.freeze`는 값에 지정되는 것이지, 변수 자체가 동결되는 것이 아니다.
    
    ```jsx
    let my_littlewhitespace_variable = {};
    const my_little_constant = my_littlewhitespace_variable;
    my_little_constant.butterfly = "free"; // {butterfly: "free"}
    Object.freeze(my_littlewhitespace_variable);
    my_little_constant.monster = "free"; // Error!;
    my_little_constant = Math.PI;     // Error!
    my_littlewhitespace_variable = Math.PI;  
    ```
    

### 표현식

- ++나 -- 같은 증감 연산자는 사용하지 않는 것이 좋다.
- 표현식은 사이드 이펙트를 일으키기 때문에 순수하지 않은 코드를 조장한다.

### 분기

- switch 문은 권장하지 않는다.
- if문의 else는 문이 아니라 절(clause)이므로 이전 블록의 } 와 같은 줄에 있어야 한다.
- 정확한 불 값을 조건문에 제공하자
- else if는 꼭 case 문의 구조처럼 만들 때만 사용해야 한다.
    - 그렇지 않은 경우 else 블록 안에 if문을 넣는 것이 좋다.
- 순수 함수 스타일로 작성할 것이라면 삼항 연산자를 쓰는 것이 좋다.

### 반복문

- for문은 안쓰는 것이 좋다.
- 배열 요소를 한 번에 처리할 경우 관련 변수 관리를 전부 알아서 해주는 forEach를 사용하는 것이 좋다.
- 반복문을 만드는 가장 좋은 방법은 [꼬리 재귀](https://www.notion.so/3a1c972e03cc4be59dcca992800bccad?pvs=21)를 사용하는 것이다.

### 중단문

- 함수에서 언제 return문을 쓰는지 정확하게 아는 것이 중요하다.

### 그 외의 내용들

- debugger 문은 실행의 중단을 유발할 수 있는데, 중단점에 도달한 것과 비슷하다. 개발과정에서만 사용해야 한다.
    
    ```jsx
    function potentiallyBuggyCode() {
    	debugger;
    // 버그가 있을 것으로 생각하는 코드를 분석하거나, 한 단계씩 진행해보거나...
    }
    ```
    

### 구두법

- if나 else문에서 항상 블록을 사용하자.(단일 문장 x)

# 12. 함수

- 함수가 호출되면 활성 객체가 만들어진다.
- 자바스크립트는 활성 객체를 힙에 저장하고, 함수가 종료된다고 자동으로 비활성화하지 않고 해당 객체에 대한 참조가 있는 한 계속 살아있으며, 가비지 컬렉터에 의해 처리된다.
- 함수 객체는 변경할 수 있어서 좋지 않다.
- 함수 객체의 prototype의 사용을 권장하지 않는다.
    - 필요없는 메서드들을 상속받기 때문에
- 함수 객체는 함수 실행 코드에 대한 참조와 함수 객체가 생성되는 시점에 활성화된 활성 객체에 대한 참조 덕분에 클로저를 사용할 수 있다.

- throw는 어떤 값이든 허용한다.
- 잘 작성된 자바스크립트 프로그램에서는 예외 객체가 전혀 필요하지 않다.
- try catch문에서 catch는 throw문이 던진 단 한 개의 인자만 받을 수 있다.
- 하나의 함수에서 try를 두 번 이상 쓰지 않도록 주의한다.

### 되감기

- 예외 처리를 할 때 성능 패널티를 신경써야 한다.

### 일상적인 예외

- 정상적인 결과를 처리할 때는 예외 처리를 사용해선 안된다.
    - ex) 파일을 읽는 함수에서 파일을 찾을 수 없는 것

<aside>
💡 예외 처리는 예상하지 못한 문제를 처리할 때만 사용한다.

</aside>

- 예상되는 모든 출력 값을 반환 값으로 다루고, 그렇지 않은 것만 예외로 남겨두자
- return 자리에 throw를 쓰지 말자

### 비동기 프로그래밍에서의 예외 처리

- 예외 처리는 스택을 거꾸로 되감으면서 진행되는데, 비동기 프로그래밍에서 스택은 매 회 비워지기 때문에 아주 제한된 쓰임새(현재 존재하는 지역적인 문제 알림)만 가지게 된다.

### 보안

예외 처리는 신뢰할 수 없는 두 개의 함수가 서로 결탁할 수 있는 대화 창구를 제공한다.

### 신뢰성

- 예외 객체는 호출 스택으로 전달되어 잘못 이해되거나 잊혀지기 쉽다 → 이는 신뢰할 수 없는 결과를 만든다.
- 예외 객체의 정보는 저널 항목, 로그 형태로 프로그래머에게 전달되어야 한다.

axios의 interceptor에 예외처리를 하자!!!!! → 모든 곳에서 예외처리 가능

# 15. 프로그램

- 자바스크립트는 웹페이지에 **텍스트 형태**로 삽입된다.
- 자바스크립트 엔진은 자바스크립트 소스 코드를 컴파일해서 기계어나 중간 언어, 혹은 둘 다 변환하는데 그래서 이식성이 뛰어나다. (기계와 프로그램 사이에 의존성이 없다.)
- 자바스크립트 컴파일러는 프로그램의 중요한 보안 관련 속성을 쉽고 빠르게 확인할 수 있다.(?)
- 자바스크립트 코드를 HTML 페이지에 포함시키면
    - 성능상으로 페이지에 있는 코드를 압축하거나 캐싱할 수 없다
    - 보안상으로도 XSS 공격을 받을 수 있다.
- 각 소스 단위는 함수처럼 컴파일되어 호출되는데 이 결과로 함수 객체가 만들어지고 실행될 수도 있다.
- 모든 소스 단위에 자동으로 만들어지는 객체와 함수들이 있다.
    - ex) Number, Math, Array, Object, String
